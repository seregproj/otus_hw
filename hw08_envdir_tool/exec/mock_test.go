// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seregproj/otus_hw/hw08_envdir_tool/exec (interfaces: IExecClient,ICmd)

// Package exec_test is a generated GoMock package.
package exec_test

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	exec "github.com/seregproj/otus_hw/hw08_envdir_tool/exec"
)

// MockIExecClient is a mock of IExecClient interface.
type MockIExecClient struct {
	ctrl     *gomock.Controller
	recorder *MockIExecClientMockRecorder
}

// MockIExecClientMockRecorder is the mock recorder for MockIExecClient.
type MockIExecClientMockRecorder struct {
	mock *MockIExecClient
}

// NewMockIExecClient creates a new mock instance.
func NewMockIExecClient(ctrl *gomock.Controller) *MockIExecClient {
	mock := &MockIExecClient{ctrl: ctrl}
	mock.recorder = &MockIExecClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecClient) EXPECT() *MockIExecClientMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockIExecClient) Command(arg0 string, arg1 ...string) exec.ICmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(exec.ICmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockIExecClientMockRecorder) Command(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockIExecClient)(nil).Command), varargs...)
}

// MockICmd is a mock of ICmd interface.
type MockICmd struct {
	ctrl     *gomock.Controller
	recorder *MockICmdMockRecorder
}

// MockICmdMockRecorder is the mock recorder for MockICmd.
type MockICmdMockRecorder struct {
	mock *MockICmd
}

// NewMockICmd creates a new mock instance.
func NewMockICmd(ctrl *gomock.Controller) *MockICmd {
	mock := &MockICmd{ctrl: ctrl}
	mock.recorder = &MockICmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICmd) EXPECT() *MockICmdMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockICmd) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockICmdMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockICmd)(nil).Run))
}

// SetEnv mocks base method.
func (m *MockICmd) SetEnv(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnv", arg0)
}

// SetEnv indicates an expected call of SetEnv.
func (mr *MockICmdMockRecorder) SetEnv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnv", reflect.TypeOf((*MockICmd)(nil).SetEnv), arg0)
}

// SetStderr mocks base method.
func (m *MockICmd) SetStderr(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStderr", arg0)
}

// SetStderr indicates an expected call of SetStderr.
func (mr *MockICmdMockRecorder) SetStderr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStderr", reflect.TypeOf((*MockICmd)(nil).SetStderr), arg0)
}

// SetStdin mocks base method.
func (m *MockICmd) SetStdin(arg0 io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdin", arg0)
}

// SetStdin indicates an expected call of SetStdin.
func (mr *MockICmdMockRecorder) SetStdin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdin", reflect.TypeOf((*MockICmd)(nil).SetStdin), arg0)
}

// SetStdout mocks base method.
func (m *MockICmd) SetStdout(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdout", arg0)
}

// SetStdout indicates an expected call of SetStdout.
func (mr *MockICmdMockRecorder) SetStdout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdout", reflect.TypeOf((*MockICmd)(nil).SetStdout), arg0)
}
